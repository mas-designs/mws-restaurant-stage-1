
let dbPromise;class DBHelper{static get DATABASE_URL(){const port=1337
return`http://localhost:${port}/restaurants`;}
static openDatabase(){return idb.open('restaurants',1,function(upgradeDb){upgradeDb.createObjectStore('restaurants',{keyPath:'id'});});}
static fetchRestaurantsFetch(callback){DBHelper.getCachedMessages().then(function(data){if(data.length>0){return callback(null,data);}
fetch(DBHelper.DATABASE_URL,{credentials:'same-origin'}).then(res=>res.json()).then(data=>{dbPromise.then(function(db){var transaction=db.transaction('restaurants','readwrite');var store=transaction.objectStore('restaurants');data.forEach(restaurant=>store.put(restaurant));store.openCursor(null,'prev').then(function(cursor){return cursor.advance(100);}).then(function deleteRest(cursor){if(!cursor){return;}
cursor.delete();return cursor.continue().then(deleteRest);});});return callback(null,data);}).catch(err=>{return callback(err,null)});});}
static getCachedMessages(){dbPromise=DBHelper.openDatabase();return dbPromise.then(function(db){var transaction=db.transaction('restaurants');var objectStore=transaction.objectStore('restaurants');return objectStore.getAll();});}
static fetchRestaurantById(id,callback){DBHelper.fetchRestaurantsFetch((error,restaurants)=>{if(error){callback(error,null);}else{const restaurant=restaurants.find(r=>r.id==id);if(restaurant){callback(null,restaurant);}else{callback('Restaurant does not exist',null);}}});}
static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurantsFetch((error,restaurants)=>{if(error){callback(error,null);}else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results);}});}
static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurantsFetch((error,restaurants)=>{if(error){callback(error,null);}else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results);}});}
static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurantsFetch((error,restaurants)=>{if(error){callback(error,null);}else{let results=restaurants
if(cuisine!='all'){results=results.filter(r=>r.cuisine_type==cuisine);}
if(neighborhood!='all'){results=results.filter(r=>r.neighborhood==neighborhood);}
callback(null,results);}});}
static fetchNeighborhoods(callback){DBHelper.fetchRestaurantsFetch((error,restaurants)=>{if(error){callback(error,null);}else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood)
const uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i)
callback(null,uniqueNeighborhoods);}});}
static fetchCuisines(callback){DBHelper.fetchRestaurantsFetch((error,restaurants)=>{if(error){callback(error,null);}else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type)
const uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i)
callback(null,uniqueCuisines);}});}
static urlForRestaurant(restaurant){return(`./restaurant.html?id=${restaurant.id}`);}
static mapMarkerForRestaurant(restaurant,map){const marker=new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP});return marker;}}
if('serviceWorker'in navigator){navigator.serviceWorker.register('sw.min.js').then(function(registration){console.log('Serviceworker was sucessfully registered',registration);}).catch(function(err){console.log('Could not register Serviceworker',err);})}